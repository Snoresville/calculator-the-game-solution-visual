{
  "version": 3,
  "sources": ["../../javascript-color-gradient/src/index.js"],
  "sourcesContent": ["class GradientColor {\r\n  constructor(startColor = \"\", endColor = \"\", minNum = 0, maxNum = 10) {\r\n    this.setColorGradient = (colorStart, colorEnd) => {\r\n      startColor = getHexColor(colorStart);\r\n      endColor = getHexColor(colorEnd);\r\n    };\r\n\r\n    this.setMidpoint = (minNumber, maxNumber) => {\r\n      minNum = minNumber;\r\n      maxNum = maxNumber;\r\n    };\r\n\r\n    this.getColor = (numberValue) => {\r\n      if (numberValue) {\r\n        return (\r\n          \"#\" +\r\n          generateHex(\r\n            numberValue,\r\n            startColor.substring(0, 2),\r\n            endColor.substring(0, 2)\r\n          ) +\r\n          generateHex(\r\n            numberValue,\r\n            startColor.substring(2, 4),\r\n            endColor.substring(2, 4)\r\n          ) +\r\n          generateHex(\r\n            numberValue,\r\n            startColor.substring(4, 6),\r\n            endColor.substring(4, 6)\r\n          )\r\n        );\r\n      }\r\n    };\r\n\r\n    const generateHex = (number, start, end) => {\r\n      if (number < minNum) {\r\n        number = minNum;\r\n      } else if (number > maxNum) {\r\n        number = maxNum;\r\n      }\r\n\r\n      const midPoint = maxNum - minNum;\r\n      const startBase = parseInt(start, 16);\r\n      const endBase = parseInt(end, 16);\r\n      const average = (endBase - startBase) / midPoint;\r\n      const finalBase = Math.round(average * (number - minNum) + startBase);\r\n      const balancedFinalBase =\r\n        finalBase < 16 ? \"0\" + finalBase.toString(16) : finalBase.toString(16);\r\n      return balancedFinalBase;\r\n    };\r\n\r\n    const getHexColor = (color) => {\r\n      return color.substring(color.length - 6, color.length);\r\n    };\r\n  }\r\n}\r\n\r\nclass Gradient {\r\n  constructor(\r\n    colorGradients = \"\",\r\n    maxNum = 10,\r\n    colors = [\"\", \"\"],\r\n    intervals = []\r\n  ) {\r\n    const setColorGradient = (gradientColors) => {\r\n      if (gradientColors.length < 2) {\r\n        throw new Error(\r\n          `setColorGradient should have more than ${gradientColors.length} color`\r\n        );\r\n      } else {\r\n        const increment = maxNum / (gradientColors.length - 1);\r\n        const firstColorGradient = new GradientColor();\r\n        const lower = 0;\r\n        const upper = 0 + increment;\r\n        firstColorGradient.setColorGradient(\r\n          gradientColors[0],\r\n          gradientColors[1]\r\n        );\r\n        firstColorGradient.setMidpoint(lower, upper);\r\n        colorGradients = [firstColorGradient];\r\n        intervals = [\r\n          {\r\n            lower,\r\n            upper,\r\n          },\r\n        ];\r\n\r\n        for (let i = 1; i < gradientColors.length - 1; i++) {\r\n          const gradientColor = new GradientColor();\r\n          const lower = 0 + increment * i;\r\n          const upper = 0 + increment * (i + 1);\r\n          gradientColor.setColorGradient(\r\n            gradientColors[i],\r\n            gradientColors[i + 1]\r\n          );\r\n          gradientColor.setMidpoint(lower, upper);\r\n          colorGradients[i] = gradientColor;\r\n          intervals[i] = {\r\n            lower,\r\n            upper,\r\n          };\r\n        }\r\n        colors = gradientColors;\r\n      }\r\n    };\r\n\r\n    this.setColorGradient = (...gradientColors) => {\r\n      setColorGradient(gradientColors);\r\n      return this;\r\n    };\r\n\r\n    this.getColors = () => {\r\n      const gradientColorsArray = [];\r\n      for (let j = 0; j < intervals.length; j++) {\r\n        const interval = intervals[j];\r\n        const start = interval.lower === 0 ? 1 : Math.ceil(interval.lower);\r\n        const end =\r\n          interval.upper === maxNum\r\n            ? interval.upper + 1\r\n            : Math.ceil(interval.upper);\r\n        for (let i = start; i < end; i++) {\r\n          gradientColorsArray.push(colorGradients[j].getColor(i));\r\n        }\r\n      }\r\n      return gradientColorsArray;\r\n    };\r\n\r\n    this.getColor = (numberValue) => {\r\n      if (isNaN(numberValue)) {\r\n        throw new TypeError(`getColor should be a number`);\r\n      } else if (numberValue <= 0) {\r\n        throw new TypeError(`getColor should be greater than ${numberValue}`);\r\n      } else {\r\n        const toInsert = numberValue + 1;\r\n        const segment = (maxNum - 0) / colorGradients.length;\r\n        const index = Math.min(\r\n          Math.floor((Math.max(numberValue, 0) - 0) / segment),\r\n          colorGradients.length - 1\r\n        );\r\n        return colorGradients[index].getColor(toInsert);\r\n      }\r\n    };\r\n\r\n    this.setMidpoint = (maxNumber) => {\r\n      if (!isNaN(maxNumber) && maxNumber >= 0) {\r\n        maxNum = maxNumber;\r\n        setColorGradient(colors);\r\n      } else if (maxNumber <= 0) {\r\n        throw new RangeError(`midPoint should be greater than ${maxNumber}`);\r\n      } else {\r\n        throw new RangeError(\"midPoint should be a number\");\r\n      }\r\n      return this;\r\n    };\r\n  }\r\n}\r\n\r\nmodule.exports = Gradient;\r\n"],
  "mappings": "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",
  "names": ["lower", "upper"]
}
