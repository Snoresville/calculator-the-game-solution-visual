import type { Graph, NodeTypeToken } from '../model/graph.mjs';
import type { GraphNode } from '../model/node.mjs';
/**
 * Initializes a node's position in context of a graph's width and height.
 */
export type PositionInitializer<T extends NodeTypeToken, Node extends GraphNode<T>> = (node: Node, width: number, height: number) => [number, number];
declare function Stable<T extends NodeTypeToken, Node extends GraphNode<T>>(previousGraph: Graph<T, Node>): PositionInitializer<T, Node>;
/**
 * Collection of built-in position initializers.
 */
export declare const PositionInitializers: {
    /**
     * Initializes node positions to a graph's center.
     */
    Centered: PositionInitializer<string, GraphNode<string>>;
    /**
     * Randomly initializes node positions within the visible area.
     */
    Randomized: PositionInitializer<string, GraphNode<string>>;
    /**
     * Initializes node positions based on other graph.
     */
    Stable: typeof Stable;
};
export {};
