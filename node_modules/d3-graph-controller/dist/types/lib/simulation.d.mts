import type { Vector } from 'vecti';
import type { GraphConfig } from '../config/config.mjs';
import type { GraphSimulation } from './types.mjs';
import type { Graph, NodeTypeToken } from '../model/graph.mjs';
import type { GraphLink } from '../model/link.mjs';
import type { GraphNode } from '../model/node.mjs';
export interface DefineSimulationParams<T extends NodeTypeToken, Node extends GraphNode<T>, Link extends GraphLink<T, Node>> {
    readonly center: () => Vector;
    readonly config: GraphConfig<T, Node, Link>;
    readonly graph: Graph<T, Node, Link>;
    readonly onTick: () => void;
}
export declare function defineSimulation<T extends NodeTypeToken, Node extends GraphNode<T>, Link extends GraphLink<T, Node>>({ center, config, graph, onTick, }: DefineSimulationParams<T, Node, Link>): GraphSimulation<T, Node, Link>;
