import type { GraphConfig } from '../config/config.mjs';
import type { Drag, NodeDragEvent } from './types.mjs';
import type { NodeTypeToken } from '../model/graph.mjs';
import type { GraphLink } from '../model/link.mjs';
import type { GraphNode } from '../model/node.mjs';
export interface DefineDragParams<T extends NodeTypeToken, Node extends GraphNode<T>, Link extends GraphLink<T, Node>> {
    readonly config: GraphConfig<T, Node, Link>;
    readonly onDragStart: (event: NodeDragEvent<T, Node>, d: Node) => void;
    readonly onDragEnd: (event: NodeDragEvent<T, Node>, d: Node) => void;
}
export declare function defineDrag<T extends NodeTypeToken, Node extends GraphNode<T>, Link extends GraphLink<T, Node>>({ config, onDragStart, onDragEnd, }: DefineDragParams<T, Node, Link>): Drag<T, Node>;
