import type { LinkFilter } from '../config/filter.mjs';
import type { Graph, NodeTypeToken } from '../model/graph.mjs';
import type { GraphLink } from '../model/link.mjs';
import type { GraphNode } from '../model/node.mjs';
export interface GraphFilterParams<T extends NodeTypeToken, Node extends GraphNode<T>, Link extends GraphLink<T, Node>> {
    readonly graph: Graph<T, Node, Link>;
    readonly filter: T[];
    readonly focusedNode?: Node | undefined;
    readonly includeUnlinked: boolean;
    readonly linkFilter: LinkFilter<T, Node, Link>;
}
export declare function filterGraph<T extends NodeTypeToken, Node extends GraphNode<T>, Link extends GraphLink<T, Node>>({ graph, filter, focusedNode, includeUnlinked, linkFilter, }: GraphFilterParams<T, Node, Link>): Graph<T, Node, Link>;
